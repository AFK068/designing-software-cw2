// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ApiErrorResponse defines model for ApiErrorResponse.
type ApiErrorResponse struct {
	Code    *string `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// GetFileResponse defines model for GetFileResponse.
type GetFileResponse struct {
	FileData *string `json:"fileData,omitempty"`
	FileHash *string `json:"fileHash,omitempty"`
}

// PostFileRequest defines model for PostFileRequest.
type PostFileRequest struct {
	File     *openapi_types.File `json:"file,omitempty"`
	Location *string             `json:"location,omitempty"`
}

// PostFileResponse defines model for PostFileResponse.
type PostFileResponse struct {
	FileID *openapi_types.UUID `json:"fileID,omitempty"`
}

// GetFileParams defines parameters for GetFile.
type GetFileParams struct {
	// FileID The ID of the file to retrieve
	FileID openapi_types.UUID `form:"fileID" json:"fileID"`
}

// PostFileMultipartRequestBody defines body for PostFile for multipart/form-data ContentType.
type PostFileMultipartRequestBody = PostFileRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get file data
	// (GET /file)
	GetFile(ctx echo.Context, params GetFileParams) error
	// Upload a file
	// (POST /file)
	PostFile(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetFile(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFileParams
	// ------------- Required query parameter "fileID" -------------

	err = runtime.BindQueryParameter("form", true, true, "fileID", ctx.QueryParams(), &params.FileID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fileID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFile(ctx, params)
	return err
}

// PostFile converts echo context to params.
func (w *ServerInterfaceWrapper) PostFile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFile(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/file", wrapper.GetFile)
	router.POST(baseURL+"/file", wrapper.PostFile)

}
